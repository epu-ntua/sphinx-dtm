input {
    file {
      path => ["/var/log/suricata/eve.json"]
      sincedb_path => ["/usr/share/logstash/logs/since-suricata.db"]
	  codec => json
      type => "SuricataIDPS"
    }
}

filter {
    if [type] == "SuricataIDPS" {
        date {
          match => [ "timestamp", "ISO8601" ]
        }
        mutate {
            add_field => { "[sphinx][component]" => "dtm" }
            add_field => { "[sphinx][tool]" => "suricata" }
        }
    }
    if [src_ip] {
        geoip {
          source => src_ip
          target => src_geoip
          database => "/usr/share/logstash/vendor/geoip/GeoLite2-City.mmdb"
        }
        mutate {
          add_field => { "src_ip_rdns" => "%{src_ip}" }
        }
        dns {
          reverse => [ "src_ip_rdns" ]
          action => "replace"
        }
    }
    if [dest_ip] {
        geoip {
          source => dest_ip
          target => dest_geoip
          database => "/usr/share/logstash/vendor/geoip/GeoLite2-City.mmdb"
        }
        mutate {
          add_field => { "dest_ip_rdns" => "%{dest_ip}" }
        }
        dns {
          reverse => [ "dest_ip_rdns" ]
          action => "replace"
        }
    }
    if [event_type] != "stats" {
        # Set VLAN to 0 if not present.
        if ![vlan] {
          if [src_ip] and [dest_ip] {
            mutate {
              add_field => { "vlan" => "0" }
            }
          }
        }
        # Determine the locality of the traffic
        if [dest_ip] or [src_ip] {
          if [dest_ip] {
            cidr {
              address => [ "%{[dest_ip]}" ]
              network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
              add_field => { "[server_autonomous_system]" => "private" }
            }
            translate {
              dictionary_path => "/usr/share/logstash/dictionaires/ip_rep_basic.yml"
              field => "[dest_ip]"
              destination => "[dest_rep_label]"
			        fallback => "__UNKNOWN"
            }
            # Parse the IP reputation lable into tags.
            if [dest_rep_label] {
              ruby {
                init => "require 'csv'"
                code => "event.set('[dest_rep_tags]', event.get('[dest_rep_label]').parse_csv)"
              }
            }
          }
          if [src_ip] {
            cidr {
              address => [ "%{[src_ip]}" ]
              network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10", "224.0.0.0/4", "ff00::/8", "255.255.255.255/32", "::" ]
              add_field => { "[client_autonomous_system]" => "private" }
            }
            translate {
              dictionary_path => "/usr/share/logstash/dictionaires/ip_rep_basic.yml"
              field => "[src_ip]"
              destination => "[src_rep_label]"
			        fallback => "__UNKNOWN"
            }
            # Parse the IP reputation lable into tags.
            if [src_rep_label] {
              ruby {
                init => "require 'csv'"
                code => "event.set('[src_rep_tags]', event.get('[src_rep_label]').parse_csv)"
              }
            }
          }
          # Merge reputation tags.
          ruby {
            init => "require 'csv'"
            code => '
              src_tags = event.get("[src_rep_label]")
              dest_tags = event.get("[dest_rep_label]")
              if (src_tags)
                rep_tags = src_tags
                if (dest_tags)
                  rep_tags = rep_tags << "," << dest_tags
                end
                else (dest_tags)
                  rep_tags = dest_tags
                end
                if (rep_tags)
                  event.set("rep_tags", rep_tags.parse_csv )
                end
            '
          }
        }
        # IP traffic processing.
        if [proto] {
          # lookup IANA service name for source and destination ports.
          if [proto] == "TCP" {
            if [src_port] {
              translate {
                dictionary_path => "/usr/share/logstash/dictionaires/iana_service_names_tcp.yml"
                field => "[src_port]"
                destination => "[src_port_name]"
                fallback => "__UNKNOWN"
              }
            }
            if [dest_port] {
              translate {
                dictionary_path => "/usr/share/logstash/dictionaires/iana_service_names_tcp.yml"
                field => "[dest_port]"
                destination => "[dest_port_name]"
                fallback => "__UNKNOWN"
              }
            }
          } else if [proto] == "UDP" {
            if [src_port] {
              translate {
                dictionary_path => "/usr/share/logstash/dictionaires/iana_service_names_udp.yml"
                field => "[src_port]"
                destination => "[src_port_name]"
                fallback => "__UNKNOWN"
              }
            }
            if [dest_port] {
              translate {
                dictionary_path => "/usr/share/logstash/dictionaires/iana_service_names_udp.yml"
                field => "[dest_port]"
                destination => "[dest_port_name]"
                fallback => "__UNKNOWN"
              }
            }
          } else if [proto] == "SCTP" {
            if [src_port] {
              translate {
                dictionary_path => "/usr/share/logstash/dictionaires/iana_service_names_sctp.yml"
                field => "[src_port]"
                destination => "[src_port_name]"
                fallback => "__UNKNOWN"
              }
            }
            if [dest_port] {
              translate {
                dictionary_path => "/usr/share/logstash/dictionaires/iana_service_names_sctp.yml"
                field => "[dest_port]"
                destination => "[dest_port_name]"
                fallback => "__UNKNOWN"
              }
            }
          } else if [proto] == "DCCP" {
            if [src_port] {
              translate {
                dictionary_path => "/usr/share/logstash/dictionaires/iana_service_names_dccp.yml"
                field => "[src_port]"
                destination => "[src_port_name]"
                fallback => "__UNKNOWN"
              }
            }
            if [dest_port] {
              translate {
                dictionary_path => "/usr/share/logstash/dictionaires/iana_service_names_dccp.yml"
                field => "[dest_port]"
                destination => "[dest_port_name]"
                fallback => "__UNKNOWN"
                }
              }
            } else {
              mutate {
                add_field => {
                  "src_port_name" => "__UNKNOWN"
                  "dest_port_name" => "__UNKNOWN"
                }
              }
            }
            # Ensure port numbers are integers.
            mutate {
              convert => {
                "src_port" => "integer"
                "dest_port" => "integer"
              }
            }
            # Determine client and server from source and destination ports.
            if [dest_port] and [src_port] {
              if [src_port_name] == "__UNKNOWN" {
                if [dest_port_name] == "__UNKNOWN" {
                  if [dest_port] <= [src_port] {
                    mutate {
                      add_field => { "[isServer]" => "dest" }
                    }
                  } else {
                    mutate {
                      add_field => { "[isServer]" => "src" }
                    }
                  }
                } else {
                  mutate {
                    add_field => { "[isServer]" => "dest" }
                    }
                }
              } else {
                if [dest_port_name] == "__UNKNOWN" {
                  mutate {
                    add_field => { "[isServer]" => "src" }
                  }
                } else {
                  if [dest_port] <= [src_port] {
                    mutate {
                      add_field => { "[isServer]" => "dest" }
                    }
                  } else {
                    mutate {
                      add_field => { "[isServer]" => "src" }
                    }
                  }
                }
              }
            }
            # Set final value of port name fields.
            if [src_port_name] {
              if [src_port_name] == "__UNKNOWN" {
                if [src_port] {
                  mutate {
                    replace => { "[src_port_name]" => "%{[proto]}/%{[src_port]}" }
                  }
                } else {
                  mutate {
                    replace => { "[src_port_name]" => "%{[proto]}/0" }
                  }
                }
              } else {
                mutate {
                  replace => { "[src_port_name]" => "%{[src_port_name]} (%{[proto]}/%{[src_port]})" }
                }
              }
            }
            if [dest_port_name] {
              if [dest_port_name] == "__UNKNOWN" {
                if [dest_port] {
                  mutate {
                    replace => { "[dest_port_name]" => "%{[proto]}/%{[dest_port]}" }
                  }
                } else {
                  mutate {
                    replace => { "[dest_port_name]" => "%{[proto]}/0" }
                  }
                }
              } else {
                mutate {
                  replace => { "[dest_port_name]" => "%{[dest_port_name]} (%{[proto]}/%{[dest_port]})" }
                }
              }
            }
            # Set client, server and service fields.
            if [isServer] == "dest" {
              mutate {
                add_field => {
                  "server_ip" => "%{[dest_ip]}"
                  "server_hostname" => "%{[dest_ip]}"
                  "service_port" => "%{[dest_port]}"
                  "service_name" => "%{[dest_port_name]}"
                  "client_ip" => "%{[src_ip]}"
                  "client_hostname" => "%{[host]}"
                }
              }
            } else if [isServer] == "src" {
              mutate {
                add_field => {
                  "server_ip" => "%{[src_ip]}"
                  "server_hostname" => "%{[src_ip]}"
                  "service_port" => "%{[src_port]}"
                  "service_name" => "%{[src_port_name]}"
                  "client_ip" => "%{[dest_ip]}"
                  "client_hostname" => "%{[host]}"
                }
              }
            }
        }
        # Populate alert.cve.
        if [alert][signature_id] {
            translate {
                dictionary_path => "/usr/share/logstash/dictionaires/suricata_cve.yml"
                field => "[alert][signature_id]"
                destination => "[alert][cve]"
            }
        }
    }
    if [event_type] == "alert" {
      ruby {
        code => '
          event.set("event_kind", "alert")
          
          id_event = "x-sphinx-dtm-alert--#{SecureRandom.uuid}"
          id_identity = "identity--#{SecureRandom.uuid}"

          hash = [
            {
              id: "#{id_event}", 
              type: "x-sphinx-dtm-alert", 
              spec_version: "2.1", 
              created: event.get("@timestamp"), 
              modified: event.get("@timestamp"),
              "details": event.to_hash
            },
            {
              "type": "identity", 
              "spec_version": "2.1",
              "id": "#{id_identity}",
              "created": event.get("@timestamp"),
              "modified": event.get("@timestamp"),
              "name": event.get("host")
            },
            {
              "id": "relationship--#{SecureRandom.uuid}",
              "type": "relationship",
              "spec_version": "2.1",
              "created": event.get("@timestamp"),
              "modified": event.get("@timestamp"),
              "source_ref": "#{id_identity}",
              "relationship_type": "detected",
              "target_ref": "#{id_event}"
            }
          ]
          event.set("objects", hash)
          event.set("type", "bundle")
          event.set("id", "bundle--#{SecureRandom.uuid}")'
      }
      prune {
        whitelist_names => [ "id", "type", "objects", "event_kind", "@timestamp" ]
      }
	  } else if [event_type] == "stats" {
        mutate {
            add_field => { "event_kind" => "metric" }
        }
    } else if [event_type] == "anomaly" {
        mutate {
            add_field => { "event_kind" => "anomaly" }
        }
    } else {
        mutate {
            add_field => { "event_kind" => "event" }
        }
    }
}

output {
    if ("${KAFKA_PROPERTIES_SASL_MECHANISM}" == "ANONYMOUS") {
        kafka {
               codec => json
               bootstrap_servers => "${KAFKA_BOOTSTRAP_ADDRESS}"
               client_id => "dtm-suricata"
               topic_id => "dtm-%{[event_kind]}"
        }
    } else {
        kafka {
                   codec => json
                   bootstrap_servers => "${KAFKA_BOOTSTRAP_ADDRESS}"
                   client_id => "dtm-suricata"
                   sasl_mechanism => "${KAFKA_PROPERTIES_SASL_MECHANISM}"
                   security_protocol => "${KAFKA_PROPERTIES_SECURITY_PROTOCOL}"
                   sasl_jaas_config => "${KAFKA_PROPERTIES_SASL_JAAS_CONFIG}"
                   ssl_truststore_location =>  "${FILE_JKS}"
                   ssl_truststore_password => "${SSL_TRUSTSTORE_PASSWORD}"
                   topic_id => "dtm-%{[event_kind]}"
            }
    }
    elasticsearch {
           hosts => "${ELASTICSEARCH_URL}"
           index => "${ELASTICSEARCH_INDEX}"
    }
}