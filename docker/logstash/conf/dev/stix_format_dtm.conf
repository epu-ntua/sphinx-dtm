input {
    file {
      path => ["C:/Program Files/Suricata/log/eve.json"]
      sincedb_path => ["C:/tools/logstash/logs/since-stix.db"]
      start_position => "beginning"
      codec =>   json
      type => "SuricataIDPS"
    }
}
filter {

    if [type] == "SuricataIDPS" {
        date {
          match => [ "timestamp", "ISO8601" ]
        }
        mutate {
            add_field => { "[sphinx][component]" => "dtm" }
            add_field => { "[sphinx][tool]" => "suricata" }
        }
    }
    if [src_ip] {
        geoip {
            source => "src_ip"
            target => "src_geoip"
            default_database_type => 'City'
           
        }
        mutate {
            add_field => { "src_ip_rdns" => "%{src_ip}" }
        }
        dns {
            reverse => [ "src_ip_rdns" ]
            action => "replace"
        }
    }
    if [dest_ip] {
        geoip {
            source => "dest_ip"
            target => "dest_geoip"
            default_database_type => 'City'
            database => "C:/tools/logstash/vendor/geoip/GeoLite2-City.mmdb"
        }
        mutate {
          add_field => { "dest_ip_rdns" => "%{dest_ip}" }
        }
        dns {
          reverse => [ "dest_ip_rdns" ]
          action => "replace"
        }

    }

    if [event_type] == "alert" {
	    		
		ruby {
			code => '
				event.set("event_kind", "alert")
				
				id_event = "x-sphinx-dtm-alert--#{SecureRandom.uuid}"
				id_identity = "identity--#{SecureRandom.uuid}"

				hash = [
					{
						id: "#{id_event}", 
						type: "x-sphinx-dtm-alert", 
						spec_version: "2.1", 
						created: event.get("@timestamp"), 
						modified: event.get("@timestamp"),
						"details": event.to_hash
					},
					{
						"type": "identity", 
						"spec_version": "2.1",
						"id": "#{id_identity}",
						"created": event.get("@timestamp"),
						"modified": event.get("@timestamp"),
						"name": event.get("host")
					},
					{
						"id": "relationship--#{SecureRandom.uuid}",
						"type": "relationship",
						"spec_version": "2.1",
						"created": event.get("@timestamp"),
						"modified": event.get("@timestamp"),
						"source_ref": "#{id_identity}",
						"relationship_type": "detected",
						"target_ref": "#{id_event}"
					}
				]
				event.set("objects", hash)
				event.set("type", "bundle")
				event.set("id", "bundle--#{SecureRandom.uuid}")'
		}

		prune {
			whitelist_names => [ "id", "type", "objects", "event_kind" ]
		}
	} else if [event_type] == "stats" {
        mutate {
            add_field => { "event_kind" => "metric" }
        }
    } else if [event_type] == "anomaly" {
        mutate {
            add_field => { "event_kind" => "anomaly" }
        }
    } else {
        mutate {
            add_field => { "event_kind" => "event" }
        }
    }

}

output {
	
    kafka {
           codec => json
           bootstrap_servers => ["bootstrap.146.124.106.170.nip.io:443"]
           sasl_mechanism => "OAUTHBEARER"
           security_protocol => "SASL_SSL"
           sasl_jaas_config => "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required username=\"kafkauser\" password=\"kafkauser123\";"
           ssl_truststore_location => "c:/Users/iulianb/sphinx.jks"
           ssl_truststore_password => "test@123"
           topic_id => "dtm-%{[event_kind]}"
    }

}
